// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  paddleCustomerId   String?             @unique
  paddleSubscription PaddleSubscription?

  accounts Account[]
  sessions Session[]

  connections Connection[]
  templates   Template[]
  analytics   Analytics[]
  devices     Device[]
  automations Automation[]

  @@map(name: "users")
}

model PaddleSubscription {
  id               String                   @id @default(cuid())
  subscriptionId   String                   @unique
  status           PaddleSubscriptionStatus
  priceId          String
  productId        String
  userId           String                   @unique
  user             User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  paddleCustomerId String
  scheduledChange  DateTime?
  currentPeriodEnd DateTime?
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
  Usage            Usage[]

  @@index([userId])
  @@map(name: "paddle_subscriptions")
}

model Device {
  id          String       @id @default(cuid())
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  name        String       @unique
  phoneNumber String
  status      DeviceStatus @default(DISCONNECTED)
  metadata    Json?
  connections Connection[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Automation  Automation[]

  @@index([userId])
  @@index([status])
}

model Automation {
  id             String      @id @default(cuid())
  userId         String
  user           User        @relation(fields: [userId], references: [id])
  name           String
  description    String?

  // --- Link to the Template Definition ---
  templateDefinitionId String // Stores the ID from the template registry (e.g., 'lf-order-to-whatsapp')

  // --- Configuration specific to the chosen template ---
  config         Json        // Stores the validated user input (e.g., { funnelId: 'xyz', ... })

  // --- Resource Links (optional, might be derived from config or stored for quick access) ---
  connectionId   String?     // Link to the primary connection if applicable
  connection     Connection? @relation(fields: [connectionId], references: [id])
  templateId     String?     // Link to the message template (Prisma Template model) if applicable
  template       Template?   @relation(fields: [templateId], references: [id])
  deviceId       String?     // Link to the WhatsApp device if applicable
  device         Device?     @relation(fields: [deviceId], references: [id])

  // --- Trigger Info ---
  trigger        TriggerType // The general Prisma trigger type (e.g., WEBHOOK)
  triggerConfig  Json        // Store specific trigger details (e.g., { type: 'lf_order_confirmed', webhookId: 'wh_123' })

  // --- Execution State ---
  isActive       Boolean     @default(true)
  metadata       Json?       // General metadata (last run, errors, etc.)
  runs           Run[]

  // --- Timestamps ---
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // --- Indexes ---
  @@index([userId])
  @@index([connectionId])
  @@index([deviceId])
  @@index([userId, isActive])
  @@index([templateDefinitionId]) // Index for faster lookup by template type
}

model Connection {
  id          String       @id @default(cuid())
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  platform    Platform
  credentials Json
  metadata    Json?
  isActive    Boolean      @default(true)
  broadcasts  Broadcast[]
  runs        Run[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Device      Device?      @relation(fields: [deviceId], references: [id])
  deviceId    String?
  Automation  Automation[]
  orders      Order[]
  checkouts   Checkout[]

  @@index([userId, platform])
}

model Template {
  id         String       @id @default(cuid())
  userId     String
  user       User         @relation(fields: [userId], references: [id])
  name       String
  content    String       @db.Text
  variables  String[]
  category   String       @default("order_confirmation")
  language   String       @default("en")
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  runs       Run[]
  broadcasts Broadcast[]
  Automation Automation[]

  @@index([userId])
}

model Broadcast {
  id           String          @id @default(cuid())
  connectionId String
  connection   Connection      @relation(fields: [connectionId], references: [id])
  templateId   String
  template     Template        @relation(fields: [templateId], references: [id])
  name         String
  description  String?
  recipients   Json
  metadata     Json?
  runs         Run[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  status       BroadcastStatus @default(PENDING)

  @@index([status])
  @@index([connectionId])
}

model Run {
  id             String      @id @default(cuid())
  automationId   String
  automation     Automation  @relation(fields: [automationId], references: [id], onDelete: Cascade) // Cascade delete runs if automation is deleted
  userId         String
  status         RunStatus   @default(RUNNING)
  triggerPayload Json?
  stepOutputs    Json?
  context        Json?
  currentStepId  String?
  errorMessage   String?     @db.Text
  startedAt      DateTime    @default(now())
  finishedAt     DateTime?
  Connection     Connection? @relation(fields: [connectionId], references: [id])
  connectionId   String?
  Template       Template?   @relation(fields: [templateId], references: [id])
  templateId     String?
  Broadcast      Broadcast?  @relation(fields: [broadcastId], references: [id])
  broadcastId    String?
  FailedRun      FailedRun[]
  phoneNumber    String?     // New: Store the normalized phone number the initial message was sent TO
  aiResult       Json?       // New: Store the classification from AI

  // Indexes for performance
  @@index([userId])
  @@index([automationId])
  @@index([status])
  @@index([userId, status])
  @@index([phoneNumber, status]) // Add or ensure this index exists
}

model FailedRun {
  id         String          @id @default(cuid())
  runId      String
  run        Run             @relation(fields: [runId], references: [id])
  error      String          @db.Text
  errorCode  String?
  retryCount Int             @default(0)
  lastRetry  DateTime?
  metadata   Json?
  status     FailedRunStatus @default(PENDING)
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  @@index([runId, status])
}

model Usage {
  id              String             @id @default(cuid())
  subscriptionId  String
  subscription    PaddleSubscription @relation(fields: [subscriptionId], references: [id])
  messagesSent    Int                @default(0)
  connectionsUsed Int                @default(0)
  quotaLeft       Int
  periodStart     DateTime           @default(now())
  periodEnd       DateTime
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@index([subscriptionId, periodStart, periodEnd])
}

model Analytics {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  messagesSent Int      @default(0)
  deliveryRate Float    @default(0)
  failureRate  Float    @default(0)
  metadata     Json?
  periodStart  DateTime
  periodEnd    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId, periodStart, periodEnd])
}

model Order {
  id            String      @id @default(cuid())
  connectionId  String
  connection    Connection  @relation(fields: [connectionId], references: [id])
  customerName  String
  customerEmail String
  status        OrderStatus @default(PENDING)
  metadata      Json?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([connectionId])
  @@index([status])
}

model Checkout {
  id            String         @id @default(cuid())
  connectionId  String
  connection    Connection     @relation(fields: [connectionId], references: [id])
  customerName  String
  customerEmail String
  status        CheckoutStatus @default(ABANDONED)
  metadata      Json?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([connectionId])
  @@index([status])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  NOT_CONFIRMED
  IN_PROGRESS
}

enum CheckoutStatus {
  COMPLETED
  ABANDONED
  RECOVERED
}

enum Platform {
  SHOPIFY
  LIGHTFUNNELS
  GOOGLE_SHEETS
}

enum Plan {
  FREE
  BASIC
  PRO
  ENTERPRISE
}

enum RunStatus {
  RUNNING
  WAITING
  SUCCEEDED
  FAILED
  CANCELLED
  WAITING_REPLY      
  PROCESSING_REPLY   
}

enum FailedRunStatus {
  PENDING
  RETRYING
  RESOLVED
  ABANDONED
}

enum SubStatus {
  ACTIVE
  INACTIVE
  EXPIRED
  CANCELLED
}

enum BroadcastStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum DeviceStatus {
  CONNECTED
  DISCONNECTED
  CONNECTING
  ERROR
}

enum TriggerType {
  WEBHOOK
  SCHEDULE
  API
  EVENT
}

enum PaddleSubscriptionStatus {
  active
  trialing
  paused
  canceled
  past_due
}
